// ------------------------------------------------------------------
// Datasource & Generator
// ------------------------------------------------------------------
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// ------------------------------------------------------------------
// Enums
// ------------------------------------------------------------------
enum Platform {
  ANDROID
  IOS
}

enum UserStatus {
  ACTIVE
  DISABLED
  BANNED
}

enum QrValidationResult {
  ALLOW
  DENY
  EXPIRED
  INVALID
  WRONG_AUDIENCE
}

// ------------------------------------------------------------------
// Models
// ------------------------------------------------------------------

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  firstName String
  lastName  String
  status    UserStatus @default(ACTIVE)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  currentActivationKeyId String? @unique
  currentDeviceId        String? @unique
  currentSessionId       String? @unique

  currentActivationKey ActivationKey? @relation("UserCurrentActivationKey", fields: [currentActivationKeyId], references: [id], onDelete: SetNull)
  currentDevice        Device?        @relation("UserCurrentDevice", fields: [currentDeviceId], references: [id], onDelete: SetNull)
  currentSession       Session?       @relation("UserCurrentSession", fields: [currentSessionId], references: [id], onDelete: SetNull)

  activationKeys ActivationKey[] @relation("UserActivationKeys")
  devices        Device[]        @relation("UserDevices")
  sessions       Session[]       @relation("UserSessions")
  qrValidationLogs QrValidationLog[] @relation("UserQrValidationLogs")
}

model ActivationKey {
  id        String    @id @default(cuid())
  userId    String
  key       String    @unique
  expiresAt DateTime
  usedAt    DateTime?
  createdAt DateTime  @default(now())

  user User @relation("UserActivationKeys", fields: [userId], references: [id], onDelete: Cascade)

  userCurrentFor User? @relation("UserCurrentActivationKey")

  @@index([userId])
  @@index([expiresAt])
}

model Device {
  id         String    @id @default(cuid())
  userId     String
  deviceUid  String
  platform   Platform
  model      String?
  appVersion String?
  lastSeenAt DateTime  @default(now())
  createdAt  DateTime  @default(now())
  revokedAt  DateTime?

  user User @relation("UserDevices", fields: [userId], references: [id], onDelete: Cascade)

  sessions Session[] @relation("DeviceSessions")

  userCurrentFor User? @relation("UserCurrentDevice")

  @@unique([userId, deviceUid])
  @@index([userId])
}

model Session {
  id         String    @id @default(cuid())
  userId     String
  deviceId   String?
  expiresAt  DateTime
  createdAt  DateTime  @default(now())
  revokedAt  DateTime?

  user   User    @relation("UserSessions", fields: [userId], references: [id], onDelete: Cascade)
  device Device? @relation("DeviceSessions", fields: [deviceId], references: [id], onDelete: Cascade)

  userCurrentFor User? @relation("UserCurrentSession")

  @@index([userId])
  @@index([deviceId])
}

model QrValidationLog {
  id          String   @id @default(cuid())
  userId      String?
  gateId      String
  ts          DateTime @default(now())
  result      QrValidationResult
  method      String   @default("qr")
  audInToken  String?
  kid         String?
  tokenHash   String?  // SHA256
  latencyMs   Int?
  ipAddress   String?
  userAgent   String?

  user User? @relation("UserQrValidationLogs", fields: [userId], references: [id], onDelete: SetNull)

  @@index([gateId, ts])
  @@index([userId, ts])
}
